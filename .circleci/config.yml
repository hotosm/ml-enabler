version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: hotosm/ml-enabler
      # IMAGE_TAG: ${CIRCLE_TAG/v/''}
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  deploy-ecs:
    executor: docker-publisher
    parameters:
      elb_subnets:
        type: env_var_name
      container_cpu:
        type: env_var_name
      container_memory:
        type: env_var_name
      ssl_cert:
        type: env_var_name
      db_size:
        type: env_var_name
      db_name:
        type: env_var_name
      db_user:
        type: env_var_name
      db_password:
        type: env_var_name
    steps:
      - run:
          name: Set Environment Variables
          command: |
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            echo "export JSON_CONFIG='{\"ImageTag\":\"$IMAGE_TAG\", \"ELBSubnets\":\"${<< parameters.elb_subnets >>}\", \"ContainerCpu\":\"${<< parameters.container_cpu >>}\", \"ContainerMemory\":\"${<< parameters.container_memory >>}\", \"SSLCertificateIdentifier\":\"${<< parameters.ssl_cert >>}\", \"DatabaseSize\":\"${<< parameters.db_size >>}\", \"DatabaseName\":\"${<< parameters.db_name >>}\", \"DatabaseUser\":\"${<< parameters.db_user >>}\", \"DatabasePassword\":\"${<< parameters.db_password >>}\"}'" >> $BASH_ENV
      - deploy:
          name: Deploy to CloudFormation
          command: cfn-config update production $CIRCLE_WORKING_DIRECTORY/devops/ml-enabler.template.js -f -c hot-cfn-config -t hot-cfn-config -r $AWS_REGION -p "$JSON_CONFIG"

workflows:
  version: 2
  build-master:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - publish-latest:
          requires:
            - build
          filters:
            branches:
              only: master
  build-tags:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-tag:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-ecs:
          requires: 
            - publish-tag
          elb_subnets: ELB_SUBNETS
          container_cpu: CONTAINER_CPU
          container_memory: CONTAINER_MEMORY
          ssl_cert: SSL_CERTIFICATE_ID
          db_size: DATABASE_SIZE
          db_name: DATABASE_NAME
          db_user: DATABASE_USER
          db_password: DATABASE_PASSWORD
